// Code generated by MockGen. DO NOT EDIT.
// Source: pos_service.go
//
// Generated by this command:
//
//	mockgen -source=pos_service.go -destination=mocks/pos_service_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/vudu-people/mp-sdk-go/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIPosService is a mock of IPosService interface.
type MockIPosService struct {
	ctrl     *gomock.Controller
	recorder *MockIPosServiceMockRecorder
}

// MockIPosServiceMockRecorder is the mock recorder for MockIPosService.
type MockIPosServiceMockRecorder struct {
	mock *MockIPosService
}

// NewMockIPosService creates a new mock instance.
func NewMockIPosService(ctrl *gomock.Controller) *MockIPosService {
	mock := &MockIPosService{ctrl: ctrl}
	mock.recorder = &MockIPosServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPosService) EXPECT() *MockIPosServiceMockRecorder {
	return m.recorder
}

// CreatePos mocks base method.
func (m *MockIPosService) CreatePos(request model.CreatePosRequest) (model.Pos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePos", request)
	ret0, _ := ret[0].(model.Pos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePos indicates an expected call of CreatePos.
func (mr *MockIPosServiceMockRecorder) CreatePos(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePos", reflect.TypeOf((*MockIPosService)(nil).CreatePos), request)
}

// DeletePos mocks base method.
func (m *MockIPosService) DeletePos(posID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePos", posID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePos indicates an expected call of DeletePos.
func (mr *MockIPosServiceMockRecorder) DeletePos(posID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePos", reflect.TypeOf((*MockIPosService)(nil).DeletePos), posID)
}

// GetAllPos mocks base method.
func (m *MockIPosService) GetAllPos(limit int) (model.GetAllPosResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPos", limit)
	ret0, _ := ret[0].(model.GetAllPosResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPos indicates an expected call of GetAllPos.
func (mr *MockIPosServiceMockRecorder) GetAllPos(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPos", reflect.TypeOf((*MockIPosService)(nil).GetAllPos), limit)
}

// GetPos mocks base method.
func (m *MockIPosService) GetPos(posID string) (model.Pos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPos", posID)
	ret0, _ := ret[0].(model.Pos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPos indicates an expected call of GetPos.
func (mr *MockIPosServiceMockRecorder) GetPos(posID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPos", reflect.TypeOf((*MockIPosService)(nil).GetPos), posID)
}

// GetPosByExternalID mocks base method.
func (m *MockIPosService) GetPosByExternalID(externalID string) (model.GetAllPosResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosByExternalID", externalID)
	ret0, _ := ret[0].(model.GetAllPosResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosByExternalID indicates an expected call of GetPosByExternalID.
func (mr *MockIPosServiceMockRecorder) GetPosByExternalID(externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosByExternalID", reflect.TypeOf((*MockIPosService)(nil).GetPosByExternalID), externalID)
}

// UpdatePos mocks base method.
func (m *MockIPosService) UpdatePos(posID string, request model.CreatePosRequest) (model.Pos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePos", posID, request)
	ret0, _ := ret[0].(model.Pos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePos indicates an expected call of UpdatePos.
func (mr *MockIPosServiceMockRecorder) UpdatePos(posID, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePos", reflect.TypeOf((*MockIPosService)(nil).UpdatePos), posID, request)
}
