// Code generated by MockGen. DO NOT EDIT.
// Source: store_service.go
//
// Generated by this command:
//
//	mockgen -source=store_service.go -destination=mocks/store_service_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/vudu-people/mp-sdk-go/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIStoreService is a mock of IStoreService interface.
type MockIStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockIStoreServiceMockRecorder
}

// MockIStoreServiceMockRecorder is the mock recorder for MockIStoreService.
type MockIStoreServiceMockRecorder struct {
	mock *MockIStoreService
}

// NewMockIStoreService creates a new mock instance.
func NewMockIStoreService(ctrl *gomock.Controller) *MockIStoreService {
	mock := &MockIStoreService{ctrl: ctrl}
	mock.recorder = &MockIStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStoreService) EXPECT() *MockIStoreServiceMockRecorder {
	return m.recorder
}

// CreateStore mocks base method.
func (m *MockIStoreService) CreateStore(userID string, body model.CreateStoreRequest) (model.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStore", userID, body)
	ret0, _ := ret[0].(model.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStore indicates an expected call of CreateStore.
func (mr *MockIStoreServiceMockRecorder) CreateStore(userID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStore", reflect.TypeOf((*MockIStoreService)(nil).CreateStore), userID, body)
}

// DeleteStore mocks base method.
func (m *MockIStoreService) DeleteStore(userID, storeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStore", userID, storeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStore indicates an expected call of DeleteStore.
func (mr *MockIStoreServiceMockRecorder) DeleteStore(userID, storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStore", reflect.TypeOf((*MockIStoreService)(nil).DeleteStore), userID, storeID)
}

// GetStore mocks base method.
func (m *MockIStoreService) GetStore(storeID string) (model.GetStoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore", storeID)
	ret0, _ := ret[0].(model.GetStoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStore indicates an expected call of GetStore.
func (mr *MockIStoreServiceMockRecorder) GetStore(storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockIStoreService)(nil).GetStore), storeID)
}

// GetStoreByExternalID mocks base method.
func (m *MockIStoreService) GetStoreByExternalID(userID, externalID string) (model.GetStoresResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreByExternalID", userID, externalID)
	ret0, _ := ret[0].(model.GetStoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreByExternalID indicates an expected call of GetStoreByExternalID.
func (mr *MockIStoreServiceMockRecorder) GetStoreByExternalID(userID, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreByExternalID", reflect.TypeOf((*MockIStoreService)(nil).GetStoreByExternalID), userID, externalID)
}

// GetStores mocks base method.
func (m *MockIStoreService) GetStores(userID string, limit int) (model.GetStoresResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStores", userID, limit)
	ret0, _ := ret[0].(model.GetStoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStores indicates an expected call of GetStores.
func (mr *MockIStoreServiceMockRecorder) GetStores(userID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStores", reflect.TypeOf((*MockIStoreService)(nil).GetStores), userID, limit)
}

// UpdateStore mocks base method.
func (m *MockIStoreService) UpdateStore(userID, storeID string, body model.UpdateStoreRequest) (model.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStore", userID, storeID, body)
	ret0, _ := ret[0].(model.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStore indicates an expected call of UpdateStore.
func (mr *MockIStoreServiceMockRecorder) UpdateStore(userID, storeID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStore", reflect.TypeOf((*MockIStoreService)(nil).UpdateStore), userID, storeID, body)
}
